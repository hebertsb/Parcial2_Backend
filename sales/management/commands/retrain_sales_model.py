"""
Management command para re-entrenar el modelo de predicci√≥n de ventas.
Uso: python manage.py retrain_sales_model
"""
from django.core.management.base import BaseCommand
from django.utils import timezone

from sales.ml_predictor_simple import SimpleSalesPredictor
from sales.ml_model_manager import model_manager


class Command(BaseCommand):
    help = 'Re-entrena el modelo de predicci√≥n de ventas con los datos m√°s recientes'

    def add_arguments(self, parser):
        parser.add_argument(
            '--model-version',
            type=str,
            help='Versi√≥n personalizada para el modelo (opcional)',
        )
        parser.add_argument(
            '--notes',
            type=str,
            default='Re-entrenamiento autom√°tico',
            help='Notas sobre este entrenamiento',
        )
        parser.add_argument(
            '--min-days',
            type=int,
            default=30,
            help='N√∫mero m√≠nimo de d√≠as de datos requeridos (default: 30)',
        )

    def handle(self, *args, **options):
        version = options.get('model_version')
        notes = options.get('notes')
        min_days = options.get('min_days')
        
        self.stdout.write(self.style.WARNING('=' * 70))
        self.stdout.write(self.style.WARNING('ü§ñ Iniciando re-entrenamiento del modelo de predicci√≥n de ventas'))
        self.stdout.write(self.style.WARNING('=' * 70))
        self.stdout.write('')
        
        try:
            # Crear predictor
            predictor = SimpleSalesPredictor()
            
            # Entrenar
            self.stdout.write('üìä Entrenando modelo...')
            metrics = predictor.train()
            
            # Verificar que hay suficientes datos
            if metrics['training_samples'] < min_days:
                self.stdout.write(
                    self.style.ERROR(
                        f'‚ùå ERROR: Solo hay {metrics["training_samples"]} d√≠as de datos. '
                        f'Se requieren al menos {min_days} d√≠as.'
                    )
                )
                return
            
            # Mostrar m√©tricas
            self.stdout.write(self.style.SUCCESS('‚úì Modelo entrenado exitosamente'))
            self.stdout.write('')
            self.stdout.write('üìà M√©tricas de entrenamiento:')
            self.stdout.write(f'  ‚Ä¢ Muestras: {metrics["training_samples"]} d√≠as')
            self.stdout.write(f'  ‚Ä¢ Per√≠odo: {metrics["start_date"]} a {metrics["end_date"]}')
            self.stdout.write(f'  ‚Ä¢ Ventas totales: ${metrics["total_sales"]:,.2f}')
            self.stdout.write(f'  ‚Ä¢ Promedio diario: ${metrics["average_daily_sales"]:,.2f}')
            self.stdout.write(f'  ‚Ä¢ Desviaci√≥n est√°ndar: ${metrics["std_daily_sales"]:,.2f}')
            self.stdout.write('')
            
            # Guardar modelo
            self.stdout.write('üíæ Guardando modelo...')
            model_info = model_manager.save_model(
                predictor,
                version=version,
                notes=notes
            )
            
            self.stdout.write(self.style.SUCCESS('‚úì Modelo guardado exitosamente'))
            self.stdout.write(f'  ‚Ä¢ Versi√≥n: {model_info["version"]}')
            self.stdout.write(f'  ‚Ä¢ Tama√±o: {model_info["file_size_mb"]} MB')
            self.stdout.write(f'  ‚Ä¢ Guardado en: {model_info["saved_at"]}')
            self.stdout.write('')
            
            # Generar predicciones de prueba
            self.stdout.write('üîÆ Generando predicciones de prueba (30 d√≠as)...')
            predictions = predictor.predict(days=30)
            
            self.stdout.write(self.style.SUCCESS('‚úì Predicciones generadas'))
            self.stdout.write(f'  ‚Ä¢ Total predicho: ${predictions["summary"]["total_predicted_sales"]:,.2f}')
            self.stdout.write(f'  ‚Ä¢ Promedio diario: ${predictions["summary"]["average_daily_sales"]:,.2f}')
            self.stdout.write(f'  ‚Ä¢ Crecimiento vs hist√≥rico: {predictions["summary"]["growth_rate_percent"]:+.2f}%')
            self.stdout.write('')
            
            # Performance
            self.stdout.write('üìä Evaluando rendimiento del modelo...')
            performance = predictor.get_historical_performance()
            
            self.stdout.write(self.style.SUCCESS('‚úì M√©tricas de rendimiento'))
            self.stdout.write(f'  ‚Ä¢ MAE (Error Absoluto Medio): ${performance["mae"]:,.2f}')
            self.stdout.write(f'  ‚Ä¢ RMSE (Ra√≠z del Error Cuadr√°tico Medio): ${performance["rmse"]:,.2f}')
            self.stdout.write(f'  ‚Ä¢ MAPE (Error Porcentual Absoluto Medio): {performance["mape"]:.2f}%')
            self.stdout.write('')
            
            self.stdout.write(self.style.SUCCESS('=' * 70))
            self.stdout.write(self.style.SUCCESS('‚úÖ Re-entrenamiento completado exitosamente'))
            self.stdout.write(self.style.SUCCESS('=' * 70))
            
        except ValueError as e:
            self.stdout.write('')
            self.stdout.write(self.style.ERROR('‚ùå ERROR: ' + str(e)))
            self.stdout.write('')
            self.stdout.write(self.style.WARNING('üí° Sugerencia:'))
            self.stdout.write('   Genera datos de demostraci√≥n con:')
            self.stdout.write('   python manage.py generate_demo_sales')
            self.stdout.write('')
            
        except Exception as e:
            self.stdout.write('')
            self.stdout.write(self.style.ERROR('‚ùå ERROR INESPERADO: ' + str(e)))
            self.stdout.write('')
            raise
