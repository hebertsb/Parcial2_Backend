"""
Sistema de predicciÃ³n de ventas usando Linear Regression (scikit-learn).
Alternativa mÃ¡s simple y rÃ¡pida que Prophet.
"""
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from decimal import Decimal

from django.db.models import Sum, Count
from django.db.models.functions import TruncDate
from django.utils import timezone
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

from sales.models import Order


class SimpleSalesPredictor:
    """
    Predictor de ventas usando regresiÃ³n lineal con caracterÃ­sticas polinomiales.
    """
    
    def __init__(self):
        self.model = None
        self.poly_features = None
        self.training_data = None
        self.last_trained = None
        self.metrics = {}
        self.min_date = None
        
    def _prepare_data_from_orders(self, start_date: Optional[datetime] = None) -> pd.DataFrame:
        """
        Prepara los datos de Ã³rdenes para el modelo.
        
        Args:
            start_date: Fecha de inicio para filtrar datos (opcional)
            
        Returns:
            DataFrame con datos de ventas
        """
        # Filtrar Ã³rdenes completadas
        queryset = Order.objects.filter(status='COMPLETED')
        
        if start_date:
            queryset = queryset.filter(created_at__gte=start_date)
        
        # Agrupar por dÃ­a usando TruncDate
        daily_sales = queryset.annotate(
            day=TruncDate('created_at')
        ).values('day').annotate(
            total_sales=Sum('total_price'),
            order_count=Count('id')
        ).order_by('day')
        
        # Convertir a DataFrame
        if not daily_sales:
            raise ValueError("No hay datos de ventas para entrenar el modelo")
        
        df = pd.DataFrame(list(daily_sales))
        df['date'] = pd.to_datetime(df['day'])
        # Convertir Decimal a float inmediatamente
        df['sales'] = pd.to_numeric(df['total_sales'], errors='coerce').fillna(0).astype(float)
        
        # Rellenar dÃ­as faltantes con 0
        df = df.set_index('date').resample('D').agg({'sales': 'sum'}).fillna(0).reset_index()
        
        return df[['date', 'sales']].copy()
    
    def _create_features(self, df: pd.DataFrame) -> tuple:
        """
        Crea caracterÃ­sticas para el modelo.
        
        Args:
            df: DataFrame con columna 'date'
            
        Returns:
            Tuple (X, fechas) donde X son las caracterÃ­sticas
        """
        # Guardar la fecha mÃ­nima para referencia
        if self.min_date is None:
            self.min_date = df['date'].min()
        
        # DÃ­as desde el inicio
        df['days_since_start'] = (df['date'] - self.min_date).dt.days
        
        # CaracterÃ­sticas temporales
        df['day_of_week'] = df['date'].dt.dayofweek
        df['day_of_month'] = df['date'].dt.day
        df['month'] = df['date'].dt.month
        df['is_weekend'] = (df['day_of_week'] >= 5).astype(int)
        
        # CaracterÃ­sticas cÃ­clicas para capturar estacionalidad
        df['month_sin'] = np.sin(2 * np.pi * df['month'] / 12)
        df['month_cos'] = np.cos(2 * np.pi * df['month'] / 12)
        df['day_sin'] = np.sin(2 * np.pi * df['day_of_week'] / 7)
        df['day_cos'] = np.cos(2 * np.pi * df['day_of_week'] / 7)
        
        # Seleccionar caracterÃ­sticas
        feature_columns = [
            'days_since_start', 'day_of_week', 'is_weekend',
            'month_sin', 'month_cos', 'day_sin', 'day_cos'
        ]
        
        X = df[feature_columns].values
        
        return X, df['date']
    
    def train(self, start_date: Optional[datetime] = None) -> Dict[str, Any]:
        """
        Entrena el modelo con datos histÃ³ricos.
        
        Args:
            start_date: Fecha de inicio para datos de entrenamiento
            
        Returns:
            Dict con mÃ©tricas de entrenamiento
        """
        print("ðŸ“Š Preparando datos de entrenamiento...")
        
        # Preparar datos
        self.training_data = self._prepare_data_from_orders(start_date)
        
        if len(self.training_data) < 30:
            raise ValueError(
                f"Se necesitan al menos 30 dÃ­as de datos. "
                f"Se encontraron {len(self.training_data)} dÃ­as."
            )
        
        print(f"âœ“ Datos preparados: {len(self.training_data)} dÃ­as de ventas")
        print(f"  Rango: {self.training_data['date'].min()} - {self.training_data['date'].max()}")
        print(f"  Ventas totales: ${self.training_data['sales'].sum():,.2f}")
        print(f"  Promedio diario: ${self.training_data['sales'].mean():,.2f}")
        
        # Crear caracterÃ­sticas
        X, _ = self._create_features(self.training_data)
        y = self.training_data['sales'].values.astype(float)
        
        # Crear caracterÃ­sticas polinomiales para capturar tendencias no lineales
        print("\nðŸ¤– Entrenando modelo de regresiÃ³n...")
        self.poly_features = PolynomialFeatures(degree=2, include_bias=False)
        X_poly = self.poly_features.fit_transform(X)
        
        # Entrenar modelo
        self.model = LinearRegression()
        self.model.fit(X_poly, y)
        
        self.last_trained = timezone.now()
        
        # Calcular mÃ©tricas
        predictions = self.model.predict(X_poly)
        residuals = y - predictions
        mae = np.mean(np.abs(residuals))
        rmse = np.sqrt(np.mean(residuals ** 2))
        mape = np.mean(np.abs(residuals / (y + 1e-10))) * 100
        r2 = self.model.score(X_poly, y)
        
        self.metrics = {
            'training_samples': len(self.training_data),
            'start_date': self.training_data['date'].min().strftime('%Y-%m-%d'),
            'end_date': self.training_data['date'].max().strftime('%Y-%m-%d'),
            'total_sales': float(self.training_data['sales'].sum()),
            'average_daily_sales': float(self.training_data['sales'].mean()),
            'std_daily_sales': float(self.training_data['sales'].std()),
            'min_daily_sales': float(self.training_data['sales'].min()),
            'max_daily_sales': float(self.training_data['sales'].max()),
            'trained_at': self.last_trained.isoformat(),
            'mae': float(mae),
            'rmse': float(rmse),
            'mape': float(mape),
            'r2_score': float(r2)
        }
        
        print(f"âœ“ Modelo entrenado exitosamente")
        print(f"  RÂ² Score: {r2:.4f}")
        print(f"  MAE: ${mae:,.2f}")
        print(f"  RMSE: ${rmse:,.2f}")
        
        return self.metrics
    
    def predict(self, days: int = 30) -> Dict[str, Any]:
        """
        Genera predicciones de ventas futuras.
        
        Args:
            days: NÃºmero de dÃ­as a predecir (default: 30)
            
        Returns:
            Dict con predicciones y mÃ©tricas
        """
        if self.model is None:
            raise ValueError("El modelo no ha sido entrenado. Llama a train() primero.")
        
        print(f"\nðŸ”® Generando predicciones para los prÃ³ximos {days} dÃ­as...")
        
        # Crear fechas futuras
        last_date = self.training_data['date'].max()
        future_dates = pd.date_range(
            start=last_date + timedelta(days=1),
            periods=days,
            freq='D'
        )
        
        # Crear DataFrame con fechas futuras
        future_df = pd.DataFrame({'date': future_dates})
        
        # Crear caracterÃ­sticas
        X_future, _ = self._create_features(future_df)
        X_future_poly = self.poly_features.transform(X_future)
        
        # Generar predicciones
        predictions = self.model.predict(X_future_poly)
        
        # Asegurar valores no negativos
        predictions = np.maximum(predictions, 0)
        
        # Calcular intervalos de confianza (basado en error estÃ¡ndar de residuos)
        train_predictions = self.model.predict(
            self.poly_features.transform(self._create_features(self.training_data)[0])
        )
        residuals = self.training_data['sales'].values - train_predictions
        std_error = np.std(residuals)
        
        # Intervalo de confianza del 95% (aproximadamente 1.96 * std_error)
        confidence_interval = 1.96 * std_error
        
        # Preparar resultados
        results = []
        for date, pred in zip(future_dates, predictions):
            results.append({
                'date': date.strftime('%Y-%m-%d'),
                'predicted_sales': round(float(pred), 2),
                'lower_bound': round(max(0, float(pred - confidence_interval)), 2),
                'upper_bound': round(float(pred + confidence_interval), 2),
                'confidence': 0.95
            })
        
        # Calcular mÃ©tricas de predicciÃ³n
        total_predicted = sum(r['predicted_sales'] for r in results)
        avg_predicted = total_predicted / len(results)
        
        # Comparar con promedio histÃ³rico
        historical_avg = float(self.training_data['sales'].mean())
        growth_rate = ((avg_predicted - historical_avg) / historical_avg) * 100 if historical_avg > 0 else 0
        
        result = {
            'predictions': results,
            'summary': {
                'total_days': days,
                'total_predicted_sales': round(total_predicted, 2),
                'average_daily_sales': round(avg_predicted, 2),
                'historical_average': round(historical_avg, 2),
                'growth_rate_percent': round(growth_rate, 2),
                'prediction_start': results[0]['date'],
                'prediction_end': results[-1]['date'],
            },
            'model_info': {
                'last_trained': self.last_trained.isoformat() if self.last_trained else None,
                'training_samples': self.metrics.get('training_samples', 0),
                'r2_score': self.metrics.get('r2_score', 0)
            }
        }
        
        print(f"âœ“ Predicciones generadas")
        print(f"  Total predicho: ${total_predicted:,.2f}")
        print(f"  Promedio diario: ${avg_predicted:,.2f}")
        print(f"  Crecimiento vs histÃ³rico: {growth_rate:+.2f}%")
        
        return result
    
    def get_historical_performance(self) -> Dict[str, Any]:
        """
        EvalÃºa el rendimiento del modelo en datos histÃ³ricos.
        
        Returns:
            Dict con mÃ©tricas de rendimiento
        """
        if self.model is None or self.training_data is None:
            raise ValueError("El modelo no ha sido entrenado.")
        
        return {
            'mae': round(self.metrics.get('mae', 0), 2),
            'rmse': round(self.metrics.get('rmse', 0), 2),
            'mape': round(self.metrics.get('mape', 0), 2),
            'r2_score': round(self.metrics.get('r2_score', 0), 4),
            'description': {
                'mae': 'Error Absoluto Medio (menor es mejor)',
                'rmse': 'RaÃ­z del Error CuadrÃ¡tico Medio (menor es mejor)',
                'mape': 'Error Porcentual Absoluto Medio (menor es mejor)',
                'r2_score': 'Coeficiente de DeterminaciÃ³n (mÃ¡s cercano a 1 es mejor)'
            }
        }
    
    def get_performance_metrics(self) -> Dict[str, float]:
        """
        Alias de get_historical_performance para compatibilidad.
        
        Returns:
            Dict con mÃ©tricas de rendimiento
        """
        perf = self.get_historical_performance()
        return {
            'mae': perf['mae'],
            'rmse': perf['rmse'],
            'mape': perf['mape'],
            'r2_score': perf['r2_score']
        }


def quick_predict(days: int = 30) -> Dict[str, Any]:
    """
    FunciÃ³n helper para entrenar y predecir rÃ¡pidamente.
    
    Args:
        days: NÃºmero de dÃ­as a predecir
        
    Returns:
        Dict con predicciones
        
    Ejemplo:
        >>> from sales.ml_predictor_simple import quick_predict
        >>> predictions = quick_predict(days=60)
    """
    predictor = SimpleSalesPredictor()
    predictor.train()
    return predictor.predict(days=days)
